#!/bin/bash
set -e

# Script to run opencode agent jobs
# Usage: ./run-job.sh <job-id>

if [ -z "$1" ]; then
  echo "Error: Job ID is required"
  echo "Usage: $0 <job-id>"
  exit 1
fi

JOB_ID="$1"
JOB_DIR="jobs/${JOB_ID}"
AGENT_FILE="${JOB_DIR}/agent.md"
RESULTS_DIR="${JOB_DIR}/results"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
OUTPUT_FILE="${RESULTS_DIR}/result_${TIMESTAMP}.md"

# Check if agent file exists
if [ ! -f "$AGENT_FILE" ]; then
  echo "Error: Agent file not found at $AGENT_FILE"
  exit 1
fi

# Create results directory if it doesn't exist
mkdir -p "$RESULTS_DIR"

echo "============================================"
echo "Running job: ${JOB_ID}"
echo "Agent file: ${AGENT_FILE}"
echo "Output file: ${OUTPUT_FILE}"
echo "============================================"
echo ""

# Extract prompt from agent.md
# Looking for the content after "## Prompt" section
PROMPT=$(awk '/^## Prompt/,0' "$AGENT_FILE" | tail -n +2)

if [ -z "$PROMPT" ]; then
  echo "Error: No prompt found in agent file"
  exit 1
fi

echo "Prompt extracted:"
echo "$PROMPT"
echo ""
echo "============================================"
echo ""

# Create output file with header
cat > "$OUTPUT_FILE" << EOF
# Job Result: ${JOB_ID}
**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
**Job ID:** ${JOB_ID}

---

## Prompt
${PROMPT}

---

## Result
EOF

# For now, we'll append a placeholder result
# In a real implementation, this would call the opencode CLI or API
# The GitHub Action will use the sst/opencode action directly
cat >> "$OUTPUT_FILE" << EOF

> **Note:** This is a placeholder. The actual implementation will use the opencode GitHub Action
> to execute the prompt and append the real results here.

Result will be generated by opencode when running in GitHub Actions.
EOF

echo "Job completed successfully!"
echo "Results saved to: $OUTPUT_FILE"

# Keep only the last 10 results to avoid repository bloat
cd "$RESULTS_DIR"
ls -t result_*.md 2>/dev/null | tail -n +11 | xargs -r rm --
echo "Cleaned up old results (keeping last 10)"
